mod gui {
  // The type of a gui, return this type from a shell expression to draw a gui
  type Gui = [
    `Text(Text),
    `Paragraph(Paragraph),
    `Block(Block),
    `Scrollbar(Scrollbar)
  ];

  type Color = [
    `Reset,
    `Black,
    `Red,
    `Green,
    `Yellow,
    `Blue,
    `Magenta,
    `Cyan,
    `Gray,
    `DarkGray,
    `LightRed,
    `LightGreen,
    `LightYellow,
    `LightBlue,
    `LightMagenta,
    `LightCyan,
    `White,
    `Rgb({ r: u32, g: u32, b: u32 }), // r, g, b, range 0-255
    `Indexed(u32) // max 255
  ];

  type Modifier = [
    `Bold,
    `Italic
  ];

  type Alignment = [
    `Left,
    `Center,
    `Right
  ];

  type Style = {
    fg: [Color, null],
    bg: [Color, null],
    underline_color: [Color, null],
    add_modifier: [Array<Modifier>, null],
    sub_modifier: [Array<Modifier>, null]
  };

  let style = |
    #fg: [Color, null] = null,
    #bg: [Color, null] = null,
    #underline_color: [Color, null] = null,
    #add_modifier: [Array<Modifier>, null] = null,
    #sub_modifier: [Array<Modifier>, null] = null
  | -> Style {
    fg,
    bg,
    underline_color,
    add_modifier,
    sub_modifier
  };

  type Span = {
    style: Style,
    content: string
  };

  let span = |#style: Style = style(), content: string| -> Span {
    style,
    content
  };

  type Line = {
    style: Style,
    alignment: [Alignment, null],
    spans: [Array<Span>, string]
  };

  let line = |
    #style: Style = style(),
    #alignment: [Alignment, null] = null,
    spans: [Array<Span>, string]
  | -> Line { style, alignment, spans };

  type Text = {
    style: &Style,
    alignment: &[Alignment, null],
    lines: &[Array<Line>, string]
  };

  let text = |
    #style: &Style = &style(),
    #alignment: &[Alignment, null] = &null,
    lines: &[Array<Line>, string]
  | -> Gui `Text({ style, alignment, lines });

  type Paragraph = {
    alignment: &[Alignment, null],
    lines: &[Array<Line>, string],
    scroll: &{ x: u32, y: u32 }, // y is in lines, x is in chars
    style: &Style,
    trim: &bool // trim leading whitespace when wrapping
  };

  let paragraph = |
    #style: &Style = &style(),
    #alignment: &[Alignment, null] = &null,
    #scroll: &{x: u32, y: u32} = &{x: u32:0, y: u32:0},
    #trim: &bool = &true,
    lines: &[Array<Line>, string]
  | -> Gui `Paragraph({ style, alignment, scroll, trim, lines });

  type Border = [
    `Top,
    `Right,
    `Bottom,
    `Left
  ];

  type BorderType = [
    `Plain,
    `Rounded,
    `Double,
    `Thick,
    `QuadrantInside,
    `QuadrantOutside
  ];

  type Padding = {
    bottom: u32,
    left: u32,
    right: u32,
    top: u32
  };

  type Position = [
    `Top,
    `Bottom
  ];

  type Block = {
    border: &[Array<Border>, `All, `None, null],
    border_style: &[Style, null],
    border_type: &[BorderType, null],
    child: &Gui,
    padding: &[Padding, null],
    style: &[Style, null],
    title: &[Line, null],
    title_alignment: &[Alignment, null],
    title_bottom: &[Line, null],
    title_position: &[Position, null],
    title_style: &[Style, null],
    title_top: &[Line, null]
  };

  let block = |
    #border: &[Array<Border>, `All, `None, null] = &null,
    #border_type: &[BorderType, null] = &null,
    #border_style: &[Style, null] = &null,
    #padding: &[Padding, null] = &null,
    #style: &[Style, null] = &null,
    #title: &[Line, null] = &null,
    #title_top: &[Line, null] = &null,
    #title_bottom: &[Line, null] = &null,
    #title_style: &[Style, null] = &null,
    #title_position: &[Position, null] = &null,
    #title_alignment: &[Alignment, null] = &null,
    child: &Gui
  | -> Gui `Block({
    border,
    border_type,
    border_style,
    padding,
    style,
    title,
    title_top,
    title_bottom,
    title_style,
    title_position,
    title_alignment,
    child
  });

  type ScrollbarOrientation = [
    `VerticalRight,
    `VerticalLeft,
    `HorizontalBottom,
    `HorizontalTop
  ];

  type Scrollbar = {
    begin_style: &[Style, null],
    begin_symbol: &[string, null],
    child: &Gui,
    content_length: &[u32, null],
    end_style: &[Style, null],
    end_symbol: &[string, null],
    orientation: &[ScrollbarOrientation, null],
    position: &[u32, null],
    style: &[Style, null],
    thumb_style: &[Style, null],
    thumb_symbol: &[string, null],
    track_style: &[Style, null],
    track_symbol: &[string, null],
    viewport_length: &[u32, null]
  };

  let scrollbar = |
    #begin_style: &[Style, null] = &null,
    #begin_symbol: &[string, null] = &null,
    #content_length: &[u32, null] = &null,
    #end_style: &[Style, null] = &null,
    #end_symbol: &[string, null] = &null,
    #orientation: &[ScrollbarOrientation, null] = &null,
    #position: &[u32, null] = &null,
    #style: &[Style, null] = &null,
    #thumb_style: &[Style, null] = &null,
    #thumb_symbol: &[string, null] = &null,
    #track_style: &[Style, null] = &null,
    #track_symbol: &[string, null] = &null,
    #viewport_length: &[u32, null] = &null,
    child: &Gui
  | -> Gui `Scrollbar({
    begin_style,
    begin_symbol,
    end_style,
    end_symbol,
    orientation,
    position,
    style,
    thumb_style,
    thumb_symbol,
    track_style,
    track_symbol,
    content_length,
    viewport_length,
    child
  })
}
