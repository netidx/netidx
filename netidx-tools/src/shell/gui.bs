mod gui {
  // The type of a gui, return this type from a shell expression to draw a gui
  type Gui = [
    `Text(Text),
    `Paragraph(Paragraph),
    `Block(Block),
    `Scrollbar(Scrollbar),
    `Layout(Layout),
    `Tabs(Tabs),
    `BarChart(BarChart),
    `Chart(Chart),
    `Sparkline(Sparkline),
    `LineGauge(LineGauge),
    `Gauge(Gauge),
    `InputHandler(InputHandler),
    `List(List),
    `Table(Table),
    `Calendar(Calendar)
  ];

  type MediaKeyCode = [
    `Play,
    `Pause,
    `PlayPause,
    `Reverse,
    `Stop,
    `FastForward,
    `Rewind,
    `TrackNext,
    `TrackPrevious,
    `Record,
    `LowerVolume,
    `RaiseVolume,
    `MuteVolume
  ];

  type ModifierKeyCode = [
    `LeftShift,
    `LeftControl,
    `LeftAlt,
    `LeftSuper,
    `LeftHyper,
    `LeftMeta,
    `RightShift,
    `RightControl,
    `RightAlt,
    `RightSuper,
    `RightHyper,
    `RightMeta,
    `IsoLevel3Shift,
    `IsoLevel5Shift
  ];

  type KeyCode = [
    `Backspace,
    `Enter,
    `Left,
    `Right,
    `Up,
    `Down,
    `Home,
    `End,
    `PageUp,
    `PageDown,
    `Tab,
    `BackTab,
    `Delete,
    `Insert,
    `F(i64),
    `Char(string),
    `Null,
    `Esc,
    `CapsLock,
    `ScrollLock,
    `NumLock,
    `PrintScreen,
    `Pause,
    `Menu,
    `KeypadBegin,
    `Media(MediaKeyCode),
    `Modifier(ModifierKeyCode)
  ];

  type KeyModifier = [
    `Shift,
    `Control,
    `Alt,
    `Super,
    `Hyper,
    `Meta
  ];

  type KeyEventKind = [
    `Press,
    `Repeat,
    `Release
  ];

  type KeyEventState = [
    `Keypad,
    `CapsLock,
    `NumLock
  ];

  type KeyEvent = {
    code: KeyCode,
    kind: KeyEventKind,
    modifiers: Array<KeyModifier>,
    state: Array<KeyEventState>
  };

  type MouseButton = [
    `Left,
    `Right,
    `Middle
  ];

  type MouseEventKind = [
    `Down(MouseButton),
    `Up(MouseButton),
    `Drag(MouseButton),
    `Moved,
    `ScrollDown,
    `ScrollUp,
    `ScrollLeft,
    `ScrollRight
  ];

  type MouseEvent = {
    column: i64,
    kind: MouseEventKind,
    modifiers: Array<KeyModifier>,
    row: i64
  };

  type Event = [
    `FocusGained,
    `FocusLost,
    `Key(KeyEvent),
    `Mouse(MouseEvent),
    `Paste(string),
    `Resize(i64, i64)
  ];

  type InputHandler = {
    child: &Gui,
    enabled: &[bool, null],
    handle: &fn(Event) -> [`Stop, `Continue]
  };

  let input_handler = |
    #enabled: &[bool, null] = &null,
    #handle: &fn(Event) -> [`Stop, `Continue],
    child: &Gui
  | -> Gui `InputHandler({ child, enabled, handle });

  type Color = [
    `Reset,
    `Black,
    `Red,
    `Green,
    `Yellow,
    `Blue,
    `Magenta,
    `Cyan,
    `Gray,
    `DarkGray,
    `LightRed,
    `LightGreen,
    `LightYellow,
    `LightBlue,
    `LightMagenta,
    `LightCyan,
    `White,
    `Rgb({ r: i64, g: i64, b: i64 }), // r, g, b, range 0-255
    `Indexed(i64) // max 255
  ];

  type Modifier = [
    `Bold,
    `Italic
  ];

  type Alignment = [
    `Left,
    `Center,
    `Right
  ];

  type Style = {
    fg: [Color, null],
    bg: [Color, null],
    underline_color: [Color, null],
    add_modifier: [Array<Modifier>, null],
    sub_modifier: [Array<Modifier>, null]
  };

  let style = |
    #fg: [Color, null] = null,
    #bg: [Color, null] = null,
    #underline_color: [Color, null] = null,
    #add_modifier: [Array<Modifier>, null] = null,
    #sub_modifier: [Array<Modifier>, null] = null
  | -> Style {
    fg,
    bg,
    underline_color,
    add_modifier,
    sub_modifier
  };

  type Span = {
    style: Style,
    content: string
  };

  let span = |#style: Style = style(), content: string| -> Span {
    style,
    content
  };

  type Line = {
    style: Style,
    alignment: [Alignment, null],
    spans: [Array<Span>, string]
  };

  let line = |
    #style: Style = style(),
    #alignment: [Alignment, null] = null,
    spans: [Array<Span>, string]
  | -> Line { style, alignment, spans };

  type Text = {
    style: &Style,
    alignment: &[Alignment, null],
    lines: &[Array<Line>, string]
  };

  let text = |
    #style: &Style = &style(),
    #alignment: &[Alignment, null] = &null,
    lines: &[Array<Line>, string]
  | -> Gui `Text({ style, alignment, lines });

  type Paragraph = {
    alignment: &[Alignment, null],
    lines: &[Array<Line>, string],
    scroll: &{ x: i64, y: i64 }, // y is in lines, x is in chars
    style: &Style,
    trim: &bool // trim leading whitespace when wrapping
  };

  let paragraph = |
    #style: &Style = &style(),
    #alignment: &[Alignment, null] = &null,
    #scroll: &{x: i64, y: i64} = &{x: 0, y: 0},
    #trim: &bool = &true,
    lines: &[Array<Line>, string]
  | -> Gui `Paragraph({ style, alignment, scroll, trim, lines });

  type Border = [
    `Top,
    `Right,
    `Bottom,
    `Left
  ];

  type BorderType = [
    `Plain,
    `Rounded,
    `Double,
    `Thick,
    `QuadrantInside,
    `QuadrantOutside
  ];

  type Padding = {
    bottom: i64,
    left: i64,
    right: i64,
    top: i64
  };

  type Position = [
    `Top,
    `Bottom
  ];

  type Block = {
    border: &[Array<Border>, `All, `None, null],
    border_style: &[Style, null],
    border_type: &[BorderType, null],
    child: &Gui,
    padding: &[Padding, null],
    style: &[Style, null],
    title: &[Line, null],
    title_alignment: &[Alignment, null],
    title_bottom: &[Line, null],
    title_position: &[Position, null],
    title_style: &[Style, null],
    title_top: &[Line, null]
  };

  let block = |
    #border: &[Array<Border>, `All, `None, null] = &null,
    #border_type: &[BorderType, null] = &null,
    #border_style: &[Style, null] = &null,
    #padding: &[Padding, null] = &null,
    #style: &[Style, null] = &null,
    #title: &[Line, null] = &null,
    #title_top: &[Line, null] = &null,
    #title_bottom: &[Line, null] = &null,
    #title_style: &[Style, null] = &null,
    #title_position: &[Position, null] = &null,
    #title_alignment: &[Alignment, null] = &null,
    child: &Gui
  | -> Gui `Block({
    border,
    border_type,
    border_style,
    padding,
    style,
    title,
    title_top,
    title_bottom,
    title_style,
    title_position,
    title_alignment,
    child
  });

  type ScrollbarOrientation = [
    `VerticalRight,
    `VerticalLeft,
    `HorizontalBottom,
    `HorizontalTop
  ];

  type Scrollbar = {
    begin_style: &[Style, null],
    begin_symbol: &[string, null],
    child: &Gui,
    content_length: &[i64, null],
    end_style: &[Style, null],
    end_symbol: &[string, null],
    orientation: &[ScrollbarOrientation, null],
    position: &[i64, null],
    style: &[Style, null],
    thumb_style: &[Style, null],
    thumb_symbol: &[string, null],
    track_style: &[Style, null],
    track_symbol: &[string, null],
    viewport_length: &[i64, null]
  };

  let scrollbar = |
    #begin_style: &[Style, null] = &null,
    #begin_symbol: &[string, null] = &null,
    #content_length: &[i64, null] = &null,
    #end_style: &[Style, null] = &null,
    #end_symbol: &[string, null] = &null,
    #orientation: &[ScrollbarOrientation, null] = &null,
    #position: &[i64, null] = &null,
    #style: &[Style, null] = &null,
    #thumb_style: &[Style, null] = &null,
    #thumb_symbol: &[string, null] = &null,
    #track_style: &[Style, null] = &null,
    #track_symbol: &[string, null] = &null,
    #viewport_length: &[i64, null] = &null,
    child: &Gui
  | -> Gui `Scrollbar({
    begin_style,
    begin_symbol,
    end_style,
    end_symbol,
    orientation,
    position,
    style,
    thumb_style,
    thumb_symbol,
    track_style,
    track_symbol,
    content_length,
    viewport_length,
    child
  });

  type Constraint = [
    `Min(i64),
    `Max(i64),
    `Length(i64),
    `Percentage(i64),
    `Ratio(i64, i64),
    `Fill(i64)
  ];

  type Direction = [
    `Horizontal,
    `Vertical
  ];

  type Flex = [
    `Legacy,
    `Start,
    `End,
    `Center,
    `SpaceBetween,
    `SpaceAround
  ];

  type Spacing = [
    `Space(i64),
    `Overlap(i64)
  ];

  type Layout = {
    children: &Array<(Constraint, Gui)>,
    direction: &[Direction, null],
    flex: &[Flex, null],
    horizontal_margin: &[i64, null],
    margin: &[i64, null],
    spacing: &[Spacing, null],
    vertical_margin: &[i64, null]
  };

  let layout = |
    #direction: &[Direction, null] = &null,
    #flex: &[Flex, null] = &null,
    #horizontal_margin: &[i64, null] = &null,
    #margin: &[i64, null] = &null,
    #spacing: &[Spacing, null] = &null,
    #vertical_margin: &[i64, null] = &null,
    children: &Array<(Constraint, Gui)>
  | -> Gui `Layout({
    direction,
    flex,
    horizontal_margin,
    margin,
    spacing,
    vertical_margin,
    children
  });

  type Tabs = {
    divider: &[Span, null],
    highlight_style: &[Style, null],
    padding_left: &[Line, null],
    padding_right: &[Line, null],
    selected: &[i64, null],
    style: &[Style, null],
    tabs: &Array<(Line, Gui)>
  };

  let tabs = |
    #divider: &[Span, null] = &null,
    #highlight_style: &[Style, null] = &null,
    #padding_left: &[Line, null] = &null,
    #padding_right: &[Line, null] = &null,
    #selected: &[i64, null] = &null,
    #style: &[Style, null] = &null,
    tabs: &Array<(Line, Gui)>
  | -> Gui `Tabs({
    divider,
    highlight_style,
    padding_left,
    padding_right,
    selected,
    style,
    tabs
  });

  type Bar = {
    label: &[Line, null],
    style: &[Style, null],
    text_value: &[string, null],
    value: &i64,
    value_style: &[Style, null]
  };

  let bar = |
    #label: &[Line, null] = &null,
    #style: &[Style, null] = &null,
    #text_value: &[string, null] = &null,
    #value_style: &[Style, null] = &null,
    value: &i64
  | -> Bar {
    label,
    style,
    text_value,
    value_style,
    value
  };

  type BarGroup = {
    bars: Array<Bar>,
    label: [Line, null]
  };

  let bar_group = |
    #label: [Line, null] = null,
    bars: Array<Bar>
  | -> BarGroup { label, bars };

  type BarChart = {
    bar_gap: &[i64, null],
    bar_style: &[Style, null],
    bar_width: &[i64, null],
    data: &Array<BarGroup>,
    direction: &[Direction, null],
    group_gap: &[i64, null],
    label_style: &[Style, null],
    max: &[i64, null],
    style: &[Style, null],
    value_style: &[Style, null]
  };

  let bar_chart = |
    #bar_gap: &[i64, null] = &null,
    #bar_style: &[Style, null] = &null,
    #bar_width: &[i64, null] = &null,
    #direction: &[Direction, null] = &null,
    #group_gap: &[i64, null] = &null,
    #label_style: &[Style, null] = &null,
    #max: &[i64, null] = &null,
    #style: &[Style, null] = &null,
    #value_style: &[Style, null] = &null,
    data: &Array<BarGroup>
  | -> Gui `BarChart({
    bar_gap,
    bar_style,
    bar_width,
    data,
    direction,
    group_gap,
    label_style,
    max,
    style,
    value_style
  });

  type Marker = [
    `Dot,
    `Block,
    `Bar,
    `Braille,
    `HalfBlock
  ];

  type GraphType = [
    `Scatter,
    `Line,
    `Bar
  ];

  type LegendPosition = [
    `Top,
    `TopRight,
    `TopLeft,
    `Left,
    `Right,
    `Bottom,
    `BottomRight,
    `BottomLeft
  ];

  type Axis = {
    bounds: {min: f64, max: f64},
    labels: [Array<Line>, null],
    labels_alignment: [Alignment, null],
    style: [Style, null],
    title: [Line, null]
  };

  let axis = |
    #labels: [Array<Line>, null] = null,
    #labels_alignment: [Alignment, null] = null,
    #style: [Style, null] = null,
    #title: [Line, null] = null,
    bounds: {min: f64, max: f64}
  | -> Axis { bounds, labels, labels_alignment, style, title };

  type Dataset = {
    data: &Array<(f64, f64)>,
    graph_type: &[GraphType, null],
    marker: &[Marker, null],
    name: &[Line, null],
    style: &[Style, null]
  };

  let dataset = |
    #marker: &[Marker, null] = &null,
    #graph_type: &[GraphType, null] = &null,
    #name: &[Line, null] = &null,
    #style: &[Style, null] = &null,
    data: &Array<(f64, f64)>
  | -> Dataset { name, data, marker, graph_type, style };

  type LegendConstraints = {
    width: Constraint,
    height: Constraint
  };

  type Chart = {
    datasets: &Array<Dataset>,
    hidden_legend_constraints: &[LegendConstraints, null],
    legend_position: &[LegendPosition, null],
    style: &[Style, null],
    x_axis: &[Axis, null],
    y_axis: &[Axis, null]
  };

  let chart = |
    #hidden_legend_constraints: &[LegendConstraints, null] = &null,
    #legend_position: &[LegendPosition, null] = &null,
    #style: &[Style, null] = &null,
    #x_axis: &[Axis, null] = &null,
    #y_axis: &[Axis, null] = &null,
    datasets: &Array<Dataset>
  | -> Gui `Chart({
    datasets,
    hidden_legend_constraints,
    legend_position,
    style,
    x_axis,
    y_axis
  });

  type RenderDirection = [
    `LeftToRight,
    `RightToLeft
  ];

  type SparklineBar = {
    style: [Style, null],
    value: [f64, null]
  };

  let sparkline_bar = |
    #style: [Style, null] = null,
    value: [f64, null]
  | -> SparklineBar { style, value };

  type Sparkline = {
    absent_value_style: &[Style, null],
    absent_value_symbol: &[string, null],
    data: &Array<[SparklineBar, f64, null]>,
    direction: &[RenderDirection, null],
    max: &[i64, null],
    style: &[Style, null]
  };

  let sparkline = |
    #absent_value_style: &[Style, null] = &null,
    #absent_value_symbol: &[string, null] = &null,
    #direction: &[RenderDirection, null] = &null,
    #max: &[i64, null] = &null,
    #style: &[Style, null] = &null,
    data: &Array<[SparklineBar, f64, null]>
  | -> Gui `Sparkline({
    absent_value_symbol,
    absent_value_style,
    data,
    direction,
    max,
    style
  });

  type LineSet = [
    `Normal,
    `Rounded,
    `Double,
    `Thick
  ];

  type LineGauge = {
    filled_style: &[Style, null],
    label: &[Line, null],
    line_set: &[LineSet, null],
    ratio: &f64,
    style: &[Style, null],
    unfilled_style: &[Style, null]
  };

  let line_gauge = |
    #filled_style: &[Style, null] = &null,
    #label: &[Line, null] = &null,
    #line_set: &[LineSet, null] = &null,
    #style: &[Style, null] = &null,
    #unfilled_style: &[Style, null] = &null,
    ratio: &f64
  | -> Gui `LineGauge({ filled_style, label, line_set, ratio, style, unfilled_style });

  type Gauge = {
    gauge_style: &[Style, null],
    label: &[Span, null],
    ratio: &f64,
    style: &[Style, null],
    use_unicode: &[bool, null]
  };

  let gauge = |
    #gauge_style: &[Style, null] = &null,
    #label: &[Span, null] = &null,
    #style: &[Style, null] = &null,
    #use_unicode: &[bool, null] = &null,
    ratio: &f64
  | -> Gui `Gauge({ gauge_style, label, ratio, style, use_unicode });

  type HighlightSpacing = [
    `Always,
    `Never,
    `WhenSelected
  ];

  type List = {
    highlight_spacing: &[HighlightSpacing, null],
    highlight_style: &[Style, null],
    highlight_symbol: &[string, null],
    items: &Array<Line>,
    repeat_highlight_symbol: &[bool, null],
    scroll: &[i64, null],
    selected: &[i64, null],
    style: &[Style, null]
  };

  let list = |
    #highlight_spacing: &[HighlightSpacing, null] = &null,
    #highlight_style: &[Style, null] = &null,
    #highlight_symbol: &[string, null] = &null,
    #repeat_highlight_symbol: &[bool, null] = &null,
    #scroll: &[i64, null] = &null,
    #selected: &[i64, null] = &null,
    #style: &[Style, null] = &null,
    items: &Array<Line>
  | -> Gui `List({
    highlight_spacing,
    highlight_style,
    highlight_symbol,
    items,
    repeat_highlight_symbol,
    scroll,
    selected,
    style
  });

  type Cell = {
    content: Line,
    style: [Style, null]
  };

  let cell = |
    #style: [Style, null] = null,
    content: Line
  | -> Cell { content, style };

  type Row = {
    bottom_margin: &[i64, null],
    cells: &Array<Cell>,
    height: &[i64, null],
    style: &[Style, null],
    top_margin: &[i64, null]
  };

  let row = |
    #bottom_margin: &[i64, null] = &null,
    #height: &[i64, null] = &null,
    #style: &[Style, null] = &null,
    #top_margin: &[i64, null] = &null,
    cells: &Array<Cell>
  | -> Row { cells, height, style, top_margin, bottom_margin };

  type TableState = {
    offset: i64,
    selected: [i64, null]
  };

  type Table = {
    cell_highlight_style: &[Style, null],
    column_highlight_style: &[Style, null],
    column_spacing: &[i64, null],
    flex: &[Flex, null],
    footer: &[Row, null],
    header: &[Row, null],
    highlight_spacing: &[HighlightSpacing, null],
    highlight_symbol: &[string, null],
    row_highlight_style: &[Style, null],
    rows: &Array<Row>,
    selected: &[i64, null],
    selected_cell: &[{x: i64, y: i64}, null],
    selected_column: &[i64, null],
    style: &[Style, null],
    widths: &[Array<Constraint>, null]
  };

  let table = |
    #cell_highlight_style: &[Style, null] = &null,
    #column_highlight_style: &[Style, null] = &null,
    #column_spacing: &[i64, null] = &null,
    #flex: &[Flex, null] = &null,
    #footer: &[Row, null] = &null,
    #header: &[Row, null] = &null,
    #highlight_spacing: &[HighlightSpacing, null] = &null,
    #highlight_symbol: &[string, null] = &null,
    #row_highlight_style: &[Style, null] = &null,
    #selected: &[i64, null] = &null,
    #selected_cell: &[{x: i64, y: i64}, null] = &null,
    #selected_column: &[i64, null] = &null,
    #style: &[Style, null] = &null,
    #widths: &[Array<Constraint>, null] = &null,
    rows: &Array<Row>
  | -> Gui `Table({
    cell_highlight_style,
    column_highlight_style,
    column_spacing,
    flex,
    footer,
    header,
    highlight_spacing,
    highlight_symbol,
    row_highlight_style,
    rows,
    selected,
    selected_cell,
    selected_column,
    style,
    widths
  });

  type Date = {
    year: i64,
    month: i64,
    day: i64
  };

  let date = |year: i64, month: i64, day: i64| -> Date { year, month, day };

  type CalendarEvent = {
    date: Date,
    style: Style
  };

  let calendar_event = |style: Style, date: Date| -> CalendarEvent { date, style };

  type Calendar = {
    default_style: &[Style, null],
    display_date: &Date,
    events: &[Array<CalendarEvent>, null],
    show_month: &[Style, null],
    show_surrounding: &[Style, null],
    show_weekday: &[Style, null]
  };

  let calendar = |
    #default_style: &[Style, null] = &null,
    #show_month: &[Style, null] = &null,
    #show_surrounding: &[Style, null] = &null,
    #show_weekday: &[Style, null] = &null,
    #events: &[Array<CalendarEvent>, null] = &null,
    display_date: &Date
  | -> Gui `Calendar({
    default_style,
    display_date,
    events,
    show_month,
    show_surrounding,
    show_weekday
  })
}
