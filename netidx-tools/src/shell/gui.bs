mod gui {
  // The type of a gui, return this type from a shell expression to draw a gui
  type Gui = [
    `Text(Text),
    `Paragraph(Paragraph),
    `Block(Block),
    `Scrollbar(Scrollbar),
    `Layout(Layout),
    `BarChart(BarChart)
  ];

  type MediaKeyCode = [
    `Play,
    `Pause,
    `PlayPause,
    `Reverse,
    `Stop,
    `FastForward,
    `Rewind,
    `TrackNext,
    `TrackPrevious,
    `Record,
    `LowerVolume,
    `RaiseVolume,
    `MuteVolume
  ];

  type ModifierKeyCode = [
    `LeftShift,
    `LeftControl,
    `LeftAlt,
    `LeftSuper,
    `LeftHyper,
    `LeftMeta,
    `RightShift,
    `RightControl,
    `RightAlt,
    `RightSuper,
    `RightHyper,
    `RightMeta,
    `IsoLevel3Shift,
    `IsoLevel5Shift
  ];

  type KeyCode = [
    `Backspace,
    `Enter,
    `Left,
    `Right,
    `Up,
    `Down,
    `Home,
    `End,
    `PageUp,
    `PageDown,
    `Tab,
    `BackTab,
    `Delete,
    `Insert,
    `F(u32),
    `Char(string),
    `Null,
    `Esc,
    `CapsLock,
    `ScrollLock,
    `NumLock,
    `PrintScreen,
    `Pause,
    `Menu,
    `KeypadBegin,
    `Media(MediaKeyCode),
    `Modifier(ModifierKeyCode)
  ];

  type KeyModifier = [
    `Shift,
    `Control,
    `Alt,
    `Super,
    `Hyper,
    `Meta
  ];

  type KeyEventKind = [
    `Press,
    `Repeat,
    `Release
  ];

  type KeyEventState = [
    `Keypad,
    `CapsLock,
    `NumLock
  ];

  type KeyEvent = {
    code: KeyCode,
    modifiers: Array<KeyModifier>,
    kind: KeyEventKind,
    state: Array<KeyEventState>
  };

  type MouseButton = [
    `Left,
    `Right,
    `Middle
  ];

  type MouseEventKind = [
    `Down(MouseButton),
    `Up(MouseButton),
    `Drag(MouseButton),
    `Moved,
    `ScrollDown,
    `ScrollUp,
    `ScrollLeft,
    `ScrollRight
  ];

  type MouseEvent = {
    kind: MouseEventKind,
    column: u32,
    row: u32,
    modifiers: Array<KeyModifier>
  };

  type Event = [
    `FocusGained,
    `FocusLost,
    `Key(KeyEvent),
    `Mouse(MouseEvent),
    `Paste(string),
    `Resize(u32, u32)
  ];

  type Color = [
    `Reset,
    `Black,
    `Red,
    `Green,
    `Yellow,
    `Blue,
    `Magenta,
    `Cyan,
    `Gray,
    `DarkGray,
    `LightRed,
    `LightGreen,
    `LightYellow,
    `LightBlue,
    `LightMagenta,
    `LightCyan,
    `White,
    `Rgb({ r: u32, g: u32, b: u32 }), // r, g, b, range 0-255
    `Indexed(u32) // max 255
  ];

  type Modifier = [
    `Bold,
    `Italic
  ];

  type Alignment = [
    `Left,
    `Center,
    `Right
  ];

  type Style = {
    fg: [Color, null],
    bg: [Color, null],
    underline_color: [Color, null],
    add_modifier: [Array<Modifier>, null],
    sub_modifier: [Array<Modifier>, null]
  };

  let style = |
    #fg: [Color, null] = null,
    #bg: [Color, null] = null,
    #underline_color: [Color, null] = null,
    #add_modifier: [Array<Modifier>, null] = null,
    #sub_modifier: [Array<Modifier>, null] = null
  | -> Style {
    fg,
    bg,
    underline_color,
    add_modifier,
    sub_modifier
  };

  type Span = {
    style: Style,
    content: string
  };

  let span = |#style: Style = style(), content: string| -> Span {
    style,
    content
  };

  type Line = {
    style: Style,
    alignment: [Alignment, null],
    spans: [Array<Span>, string]
  };

  let line = |
    #style: Style = style(),
    #alignment: [Alignment, null] = null,
    spans: [Array<Span>, string]
  | -> Line { style, alignment, spans };

  type Text = {
    style: &Style,
    alignment: &[Alignment, null],
    lines: &[Array<Line>, string]
  };

  let text = |
    #style: &Style = &style(),
    #alignment: &[Alignment, null] = &null,
    lines: &[Array<Line>, string]
  | -> Gui `Text({ style, alignment, lines });

  type Paragraph = {
    alignment: &[Alignment, null],
    lines: &[Array<Line>, string],
    scroll: &{ x: u32, y: u32 }, // y is in lines, x is in chars
    style: &Style,
    trim: &bool // trim leading whitespace when wrapping
  };

  let paragraph = |
    #style: &Style = &style(),
    #alignment: &[Alignment, null] = &null,
    #scroll: &{x: u32, y: u32} = &{x: u32:0, y: u32:0},
    #trim: &bool = &true,
    lines: &[Array<Line>, string]
  | -> Gui `Paragraph({ style, alignment, scroll, trim, lines });

  type Border = [
    `Top,
    `Right,
    `Bottom,
    `Left
  ];

  type BorderType = [
    `Plain,
    `Rounded,
    `Double,
    `Thick,
    `QuadrantInside,
    `QuadrantOutside
  ];

  type Padding = {
    bottom: u32,
    left: u32,
    right: u32,
    top: u32
  };

  type Position = [
    `Top,
    `Bottom
  ];

  type Block = {
    border: &[Array<Border>, `All, `None, null],
    border_style: &[Style, null],
    border_type: &[BorderType, null],
    child: &Gui,
    padding: &[Padding, null],
    style: &[Style, null],
    title: &[Line, null],
    title_alignment: &[Alignment, null],
    title_bottom: &[Line, null],
    title_position: &[Position, null],
    title_style: &[Style, null],
    title_top: &[Line, null]
  };

  let block = |
    #border: &[Array<Border>, `All, `None, null] = &null,
    #border_type: &[BorderType, null] = &null,
    #border_style: &[Style, null] = &null,
    #padding: &[Padding, null] = &null,
    #style: &[Style, null] = &null,
    #title: &[Line, null] = &null,
    #title_top: &[Line, null] = &null,
    #title_bottom: &[Line, null] = &null,
    #title_style: &[Style, null] = &null,
    #title_position: &[Position, null] = &null,
    #title_alignment: &[Alignment, null] = &null,
    child: &Gui
  | -> Gui `Block({
    border,
    border_type,
    border_style,
    padding,
    style,
    title,
    title_top,
    title_bottom,
    title_style,
    title_position,
    title_alignment,
    child
  });

  type ScrollbarOrientation = [
    `VerticalRight,
    `VerticalLeft,
    `HorizontalBottom,
    `HorizontalTop
  ];

  type Scrollbar = {
    begin_style: &[Style, null],
    begin_symbol: &[string, null],
    child: &Gui,
    content_length: &[u32, null],
    end_style: &[Style, null],
    end_symbol: &[string, null],
    orientation: &[ScrollbarOrientation, null],
    position: &[u32, null],
    style: &[Style, null],
    thumb_style: &[Style, null],
    thumb_symbol: &[string, null],
    track_style: &[Style, null],
    track_symbol: &[string, null],
    viewport_length: &[u32, null]
  };

  let scrollbar = |
    #begin_style: &[Style, null] = &null,
    #begin_symbol: &[string, null] = &null,
    #content_length: &[u32, null] = &null,
    #end_style: &[Style, null] = &null,
    #end_symbol: &[string, null] = &null,
    #orientation: &[ScrollbarOrientation, null] = &null,
    #position: &[u32, null] = &null,
    #style: &[Style, null] = &null,
    #thumb_style: &[Style, null] = &null,
    #thumb_symbol: &[string, null] = &null,
    #track_style: &[Style, null] = &null,
    #track_symbol: &[string, null] = &null,
    #viewport_length: &[u32, null] = &null,
    child: &Gui
  | -> Gui `Scrollbar({
    begin_style,
    begin_symbol,
    end_style,
    end_symbol,
    orientation,
    position,
    style,
    thumb_style,
    thumb_symbol,
    track_style,
    track_symbol,
    content_length,
    viewport_length,
    child
  });

  type Constraint = [
    `Min(u32),
    `Max(u32),
    `Length(u32),
    `Percentage(u32),
    `Ratio(u32, u32),
    `Fill(u32)
  ];

  type Direction = [
    `Horizontal,
    `Vertical
  ];

  type Flex = [
    `Legacy,
    `Start,
    `End,
    `Center,
    `SpaceBetween,
    `SpaceAround
  ];

  type Spacing = [
    `Space(u32),
    `Overlap(u32)
  ];

  type Layout = {
    children: &Array<(Constraint, Gui)>,
    direction: &[Direction, null],
    flex: &[Flex, null],
    horizontal_margin: &[u32, null],
    margin: &[u32, null],
    spacing: &[Spacing, null],
    vertical_margin: &[u32, null]
  };

  let layout = |
    #direction: &[Direction, null] = &null,
    #flex: &[Flex, null] = &null,
    #horizontal_margin: &[u32, null] = &null,
    #margin: &[u32, null] = &null,
    #spacing: &[Spacing, null] = &null,
    #vertical_margin: &[u32, null] = &null,
    children: &Array<(Constraint, Gui)>
  | -> Gui `Layout({
    direction,
    flex,
    horizontal_margin,
    margin,
    spacing,
    vertical_margin,
    children
  });

  type Bar = {
    label: &[Line, null],
    style: &[Style, null],
    text_value: &[string, null],
    value: &u64,
    value_style: &[Style, null]
  };

  let bar = |
    #label: &[Line, null] = &null,
    #style: &[Style, null] = &null,
    #text_value: &[string, null] = &null,
    #value_style: &[Style, null] = &null,
    value: &u64
  | -> Bar {
    label,
    style,
    text_value,
    value_style,
    value
  };

  type BarGroup = {
    bars: Array<Bar>,
    label: [Line, null]
  };

  let bar_group = |
    #label: [Line, null] = null,
    bars: Array<Bar>
  | -> BarGroup { label, bars };

  type BarChart = {
    bar_gap: &[u32, null],
    bar_style: &[Style, null],
    bar_width: &[u32, null],
    data: &Array<BarGroup>,
    direction: &[Direction, null],
    group_gap: &[u32, null],
    label_style: &[Style, null],
    max: &[u64, null],
    style: &[Style, null],
    value_style: &[Style, null]
  };

  let bar_chart = |
    #bar_gap: &[u32, null] = &null,
    #bar_style: &[Style, null] = &null,
    #bar_width: &[u32, null] = &null,
    #direction: &[Direction, null] = &null,
    #group_gap: &[u32, null] = &null,
    #label_style: &[Style, null] = &null,
    #max: &[u64, null] = &null,
    #style: &[Style, null] = &null,
    #value_style: &[Style, null] = &null,
    data: &Array<BarGroup>
  | -> Gui `BarChart({
    bar_gap,
    bar_style,
    bar_width,
    data,
    direction,
    group_gap,
    label_style,
    max,
    style,
    value_style
  })
}
