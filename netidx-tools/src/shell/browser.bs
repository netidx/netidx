use tui;
use tui::table;
use tui::input_handler;

let path = "/";
let structure = net::list_table(path);
let selected = { x: 0, y: 0 };
let visible_range = {
    row: {
        min: max(0, selected.y - size.rows),
        max: selected.y + size.rows
    },
    column: {
        min: max(0, selected.x - size.columns),
        max: selected.x + size.columns
    }
};
let is_visible = |row: i64, col: i64| uniq(
    (row >= (visible_range.row).min) &&
    (row <= (visible_range.row).max) &&
    (col >= (visible_range.column).min) &&
    (col <= (visible_range.column).max)
);
let columns = {
    let cols = array::map(structure.columns, |(col, _)| col);
    array::push_front(cols, "Name")
};
let header = select array::len(columns) {
    1 => row(&[cell(line("Name")), cell(line("Value"))]),
    _ => array::map(columns, |col| cell(line(col)))
};
let widths = select array::len(columns) {
    1 => [`Percentage(20), `Percentage(80)],
    _ => array::map(columns, |col| `Min(str::len(col)))
};
let rows = array::map(array::enumerate(structure.rows), |(i, row)| {
    let name = select str::basename(row) { null as _ => "", v => v };
    let name = cell(line(name));
    tui::table::row(&select array::len(columns) {
        1 => {
            let path = select is_visible(i, 0) { true => "[row]", false => "" };
            &[ name, cell(line("[net::subscribe(path)]")) ]
        },
        _ => &array::map(array::enumerate(columns), |(j, col)| select j {
            0 => name,
            j => {
                let path = select is_visible(i, j) {
                    true => "[row]/[col]",
                    false => ""
                };
                cell(line("[net::subscribe(path)]"))
            }
        })
    })
});
let handle_event = |e: Event| -> [`Stop, `Continue] select e {
    `Key(e) => select e.code {
        e@ `Left => {
            selected <- { selected with x: e ~ max(0, selected.x - 1) };
            `Stop
        },
        e@ `Right => {
            let x = e ~ min(array::len(columns) - 1, selected.x + 1);
            selected <- { selected with x };
            `Stop
        },
        e@ `Down => {
            let y = e ~ min(array::len(structure.rows) - 1, selected.y + 1);
            selected <- { selected with y };
            `Stop
        },
        e@ `Up => {
            selected <- { selected with y: e ~ max(0, selected.y - 1) };
            `Stop
        },
        e@ `Enter => select array::len(columns) {
            1 => `Stop,
            _ => {
                path <- (structure.rows)[e ~ selected.y];
                `Stop
            }
        },
        e@ `Backspace => select str::dirname(path) {
            null => `Stop,
            s => {
                path <- s;
                `Stop
            }
        },
        _ => `Continue
    },
    _ => `Continue
};
input_handler(
    #handle: &handle_event,
    &table(
        #header:&header,
        #flex:&`Center,
        #widths: &widths,
        #selected_cell: &selected,
        &rows
    )
)
