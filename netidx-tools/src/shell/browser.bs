use tui;
use tui::table;
use tui::input_handler;

dbg(errors);
dbg(size);
let path = "/";
dbg(path);
let structure = net::list_table(path);
dbg(structure);
let mode = uniq(select structure.columns {
    [] => `List,
    _ => `Table
});
dbg(mode);
let selected = { x: 1, y: 0 };
let viewport = { x: 0, y: 0 };
let columns: Array<string> = {
    let cols = array::map(structure.columns, |(col, _)| col);
    select cols {
        [] => ["Value"],
        cols => array::sort(cols)
    }
};
dbg(columns);
let visible_rows = {
    let len = array::len(structure.rows);
    let start = min(len - 1, viewport.y);
    let end = min(len, viewport.y + size.height);
    (structure.rows)[start .. end]?
};
dbg(visible_rows);
let { total: _, cols: visible_columns, widths } = {
    let init = { total: 4, cols: [], widths: [`Min(4)] };
    array::fold(columns[viewport.x ..]?, init, |{total, cols, widths}, col|
        select str::len(col) + total {
            l if l <= size.width => {
                total: l,
                cols: array::push(cols, col),
                widths: array::push(widths, `Min(str::len(col)))
            },
            _ => {total, cols, widths}
        })
};
let header = select mode {
    `List => row([cell(line("Name")), cell(line("Value"))]),
    `Table => {
        let cols = array::map(visible_columns, |col| cell(line(col)));
        row(array::push_front(cols, cell(line("Name"))))
    }
};
dbg(visible_rows);
dbg(visible_columns);
dbg(header);
let rows = array::map(visible_rows, |row| {
    let name = select str::basename(row) { null as _ => "", s => s };
    let name = cell(line(name));
    &tui::table::row(select mode {
        `List => [ name, cell(line("[any("#SUB", net::subscribe("[row]"))]")) ],
        `Table => {
            let a = array::map(visible_columns, |col| {
                let v = any("#SUB", net::subscribe("[row]/[col]"));
                cell(line("[v]"))
            });
            array::push_front(a, name)
        }
    })
});
let handle_event = |e: Event| -> [`Stop, `Continue] select e {
    `Key(e) => select e.code {
        e@ `Left => {
            select e ~ selected.x {
                e if e <= 1 => viewport <- e ~ { viewport with x: max(0, viewport.x - 1) },
                e => selected <- e ~ { selected with x: selected.x - 1 }
            };
            `Stop
        },
        e@ `Right => {
            let limit = array::len(visible_columns) - 1;
            let clim = array::len(columns) - 1;
            select e ~ selected.x {
                x if x >= limit =>
                    viewport <- x ~ { viewport with x: min(clim, viewport.x + 1) },
                e => selected <- e ~ {selected with x: selected.x + 1}
            };
            `Stop
        },
        e@ `Down => {
            let rlim = array::len(rows) - 1;
            let limit = array::len(visible_rows) - 1;
            select e ~ selected.y {
                x if x >= limit =>
                    viewport <- x ~ { viewport with y: min(rlim, viewport.y + 1) },
                e => selected <- e ~ { selected with y: selected.y + 1 }
            };
            `Stop
        },
        e@ `Up => {
            select e ~ selected.y {
                e if e <= 0 => viewport <- e ~ { viewport with y: max(0, viewport.y - 1) },
                e => selected <- e ~ { selected with y: selected.y - 1 }
            };
            `Stop
        },
        e@ `Enter => {
            path <- e ~ (structure.rows)[selected.y]?;
            selected <- e ~ { x: 1, y: 0 };
            viewport <- e ~ { x: 0, y: 0 };
            `Stop
        },
        e@ `Backspace => select e ~ str::dirname(path) {
            null as _ => `Stop,
            s => {
                path <- s;
                selected <- s ~ { x: 1, y: 0 };
                viewport <- s ~ { x: 0, y: 0 };
                `Stop
            }
        },
        _ => `Continue
    },
    _ => `Continue
};
input_handler(
    #handle: &handle_event,
    &table(
        #cell_highlight_style:&style(#bg:`Yellow),
        #header:&header,
        #widths:&[],
        #selected_cell: &selected,
        &rows
    )
)
