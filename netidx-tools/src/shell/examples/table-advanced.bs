use gui;
use gui::table;
use gui::input_handler;
use gui::block;

type Status = [
  `Running,
  `Sleeping
];

type Process = {
    pid: i64,
    name: string,
    cpu: i64,
    mem: f64,
    status: Status
};

// Sample data for a process monitor table
let process_data: Array<Process> = [
    {pid: 1234, name: "chrome", cpu: 12, mem: 450.2, status: `Running},
    {pid: 5678, name: "code", cpu: 8, mem: 312.7, status: `Running},
    {pid: 9012, name: "firefox", cpu: 15, mem: 523.1, status: `Running},
    {pid: 3456, name: "terminal", cpu: 0, mem: 45.8, status: `Running},
    {pid: 7890, name: "slack", cpu: 3, mem: 189.4, status: `Sleeping},
    {pid: 2345, name: "spotify", cpu: 2, mem: 167.3, status: `Running},
    {pid: 6789, name: "docker", cpu: 5, mem: 234.6, status: `Running},
    {pid: 4567, name: "vim", cpu: 0, mem: 12.3, status: `Running},
    {pid: 8901, name: "rust-analyzer", cpu: 18, mem: 456.7, status: `Running},
    {pid: 1357, name: "systemd", cpu: 0, mem: 8.9, status: `Sleeping}
];

// Create styled header with bold yellow text
let header = row(
    #style: &style(#fg: `Yellow, #add_modifier: [`Bold]),
    &[
        cell(line("PID")),
        cell(line("Process")),
        cell(line("CPU %")),
        cell(line("Memory (MB)")),
        cell(line("Status"))
    ]
);

// Helper function to create styled cells based on values
let cpu_cell = |cpu: i64| -> Cell {
    let style = select cpu {
        c if c > 80 => style(#fg: `Red),
        c if c > 50 => style(#fg: `Yellow),
        _ => style()
    };
    cell(#style, line("[cpu]"))
};

let status_cell = |status: Status| -> Cell {
    let style = select status {
        `Running => style(#fg: `Green),
        `Sleeping => style(#fg: `Gray)
    };
    cell(#style, line("[status]"))
};

// Create rows with conditional styling
let clock = time::timer(duration:1.0s, true);
let rows = array::map(process_data, |p: Process| -> Row {
    // Add some dynamism - CPU values change over time
    let cpu_val = p.cpu;
    cpu_val <- {
        let v = clock ~ cpu_val;
        let v = v + rand::rand(#clock, #start:-30, #end:30);
        max(0, min(100, v))
    };
    row(&[
        cell(line("[p.pid]")),
        cell(line(p.name)),
        cpu_cell(cpu_val),
        cell(line("[p.mem]")),
        status_cell(p.status)
    ])
});

// Selection and scrolling state
let selected = 0;
let max_idx = array::len(process_data) - 1;

// Handle keyboard navigation
let handle_event = |e: Event| -> [`Stop, `Continue] select e {
    `Key(k) => select k.code {
        k@`Up if selected > 0 => {
            selected <- (k ~ selected) - 1;
            k ~ `Stop
        },
        k@`Down if selected < max_idx => {
            selected <- (k ~ selected) + 1;
            k ~ `Stop
        },
        k@`Home => {
            selected <- k ~ 0;
            k ~ `Stop
        },
        k@`End => {
            selected <- k ~ max_idx;
            k ~ `Stop
        },
        k@`PageUp => {
            selected <- max(0, (k ~ selected) - 5);
            k ~ `Stop
        },
        k@`PageDown => {
            selected <- min(max_idx, (k ~ selected) + 5);
            k ~ `Stop
        },
        k => k ~ `Continue
    },
    e => e ~ `Continue
};

// Create the table with all features
let process_table = table(
    #header: &header,
    #row_highlight_style: &style(#bg: `DarkGray),
    #highlight_symbol: &"▶ ",
    #highlight_spacing: &`WhenSelected,
    #selected: &selected,
    #style: &style(#fg: `White),
    #column_spacing: &2,
    #widths: &[
        `Min(10),     // PID column
        `Min(15),     // Process name
        `Min(10),     // CPU %
        `Min(12),     // Memory
        `Min(10)      // Status
    ],
    &rows
);

// Add a status line showing selected process
let status_line = {
    let proc = process_data[selected]?;
    line("Selected: PID [proc.pid] - [proc.name]")
};

// Wrap in an input handler and styled block
input_handler(
    #handle: &handle_event,
    &block(
        #border: &`All,
        #border_type: &`Rounded,
        #title: &line("Process Monitor (Use ↑/↓, Home, End, PgUp, PgDn)"),
        #title_bottom: &status_line,
        #style: &style(#fg: `Cyan),
        &process_table
    )
)
