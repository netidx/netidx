use tui;
use tui::browser;
use tui::block;
use tui::input_handler;

let path = "/";
let command_error: error = never();
let selected_path: string = never();
let selected_row: string = never();
let cursor: MoveCursor = never();
let command_mode = false;
let command = "";

let run_command = |c: string, path: string| {
    let errors = never();
    select str::sub(#start:0, #len:2, c) {
        "w " => {
            let v = str::sub(#start:2, #len:str::len(c) - 2, c)?;
            let v = str::parse(v)?;
            net::write(path, v)?
        },
        s => error("invalid command [s]")?
    };
    command_error <- errors
};

let title_style = style(#fg:`Indexed(202));
let title_bottom = select command_mode {
    true => line(#style:title_style, ":[command]"),
    false => {
        let spans = [
            span("[path] ([selected_path])"),
            span(#style:style(#fg:`Red), "  [any(" ", command_error)]")
        ];
        line(#style:title_style, spans)
    }
};

let handle_normal_mode_key = |e: KeyCode| -> [`Stop, `Continue] select e {
    e@ `Left => { cursor <- e ~ `Left(1); `Stop },
    e@ `Right => { cursor <- e ~ `Right(1); `Stop },
    e@ `Down => { cursor <- e ~ `Down(1); `Stop },
    e@ `Up => { cursor <- e ~ `Up(1); `Stop },
    e@ `Enter => { path <- e ~ selected_row; `Stop },
    e@ `Backspace => select e ~ str::dirname(path) {
        null as _ => `Stop,
        s => {
            path <- s;
            `Stop
        }
    },
    `Char(":") => {
        command <- "";
        command_error <- error:"";
        command_mode <- true;
        `Stop
    },
    _ => `Continue
};

let handle_command_mode_key = |e: KeyCode| -> [`Stop, `Continue] select e {
    `Char(c) => {
        command <- c ~ "[command][c]";
        `Stop
    },
    x@ `Enter => {
        command_mode <- false;
        run_command(command, x ~ selected_path);
        `Stop
    },
    e@ `Backspace if command != "" => {
        let len = str::len(command) - 1;
        command <- e ~ str::sub(#start:0, #len, command)?;
        `Stop
    },
    `Esc => {
        command_mode <- false;
        `Stop
    },
    _ => `Continue
};

let handle_event = |e: Event| -> [`Stop, `Continue] select e {
    `Key(e) => select e ~ command_mode {
        true => handle_command_mode_key(e.code),
        false => handle_normal_mode_key(e.code)
    },
    _ => `Continue
};

let size: Size = never();

let browser = browser(
    #cursor,
    #selected_row: &selected_row,
    #selected_path: &selected_path,
    #style:style(#fg:`Indexed(227), #bg:`Indexed(234)),
    #selected_style:style(#bg:`Indexed(20)),
    #header_style:style(#fg:`Indexed(111)),
    #size,
    path
);

let block = block(
    #border:&`None,
    #title_bottom:&title_bottom,
    #style:&style(#bg:`Indexed(234)),
    #size:&size,
    &browser
);

input_handler(#handle: &handle_event, &block)
