type Sint = [ i32, z32, i64, z64 ];
type Uint = [ u32, v32, u64, v64 ];
type Int = [ Sint, Uint ];
type Float = [ f32, f64 ];
type Real = [ Float, decimal ];
type Number = [ Int, Real ];
type NotNull = [Number, string, error, array, datetime, duration];

/// return the first argument when all arguments are equal, otherwise return nothing
pub let all = |@args| 'all;

/// return true if all arguments are true, otherwise return false
pub let and = |@args| 'and;

/// return the number of times x has updated
pub let count = |x| 'count;

/// return the first argument divided by all subsuquent arguments
pub let divide = |@args| 'divide;

/// return e only if e is an error
pub let filter_err = |e| 'filter_err;

/// return v if f(v) is true, otherwise return nothing
pub let filter = |v, f| 'filter;

/// return true if e is an error
pub let is_err = |e| 'is_err;

/// construct an error from the specified string
pub let error = |e| 'error;

/// return the maximum value of any argument
pub let max = |a, @args| 'max;

/// return the mean of the passed in arguments
pub let mean = |v, @args| 'mean;

/// return the minimum value of any argument
pub let min = |a, @args| 'min;

/// return v only once, subsuquent updates to v will be ignored
/// and once will return nothing
pub let once = |v| 'once;

/// seq will update i times from 0 to i - 1 in that order.
pub let seq = |i| 'seq;

/// return true if any argument is true
pub let or = |@args| 'or;

/// return the product of all arguments
pub let product = |@args| 'product;

/// return the sum of all arguments
pub let sum = |@args| 'sum;

/// when v updates return v if the new value is different from the previous value,
/// otherwise return nothing.
pub let uniq = |v| 'uniq;

/// when v updates place it's value in an internal fifo queue. when clock updates
/// return the oldest value from the fifo queue. If clock updates and the queue is
/// empty, record the number of clock updates, and produce that number of
/// values from the queue when they are available.
pub let queue = |#clock, v| 'queue;

/// ignore updates to any argument and never return anything
pub let never = |@args| 'never;

/// when v updates, return it, but also print it along with the position of the expression
pub let dbg = |v| 'dbg;

/// This is the toplevel error sink for the ? operator. If no other lexical binding of errors
/// exists closer to the error site then errors handled by ? will come here.
pub let errors: error = never()
